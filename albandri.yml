#sudo ansible-playbook -i hosts-albandri -c local -v albandri.yml -vvvv | tee setup.log

- hosts: all
  gather_facts: true
  tasks:
    - name: group hosts by distribution
      group_by: key="{{ ansible_distribution }}-{{ ansible_distribution_version }}"

- hosts: RedHat-7*:RedHat-6*:CentOS-6*:Ubuntu-12.04:Ubuntu-14.04
  gather_facts: false
  tasks:
    - name: group hosts for supported distributions
      group_by: key="supported"

- hosts: "!supported"
  gather_facts: false
  tasks:
    - name: fail for unsupported distribution
      fail: msg="{{ ansible_distribution }} {{ ansible_distribution_version }}
                 is not a supported OS for a Tower installation.  Supported
                 OSes include Red Hat Enterprise Linux 6/7, CentOS 6, or
                 Ubuntu 12.04/14.04."

- name: Add repo configuration to all nodes
  hosts: RedHat-7*:RedHat-6*:CentOS-6*
  gather_facts: false
  remote_user: root
#  connection: local

  roles:
    - geerlingguy.repo-epel
    - geerlingguy.repo-remi

#- name: Apply hostname configuration
#  hosts: all
#  remote_user: root
##  connection: local
#
#  roles:
#    - alban.andrieu.hostname

- name: Apply common configuration to all nodes
  hosts: Ubuntu-12*:Ubuntu-14*
  gather_facts: false
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.common

  vars:
       apt_notification_email: "alban.andrieu@misys.com"
       apt_upgrade_system_enabled: no

- name: Apply dns configuration to all nodes
  hosts: Ubuntu-12*:Ubuntu-14*
  gather_facts: false
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.dns

  vars:
       defaultdomain: france.effix.fr
       search: misys.global.ad misys.global.ad. nt.france.effix.fr. france.effix.fr. effix.fr.
       dns_nameservers:
         - "10.25.200.3" # work dns
         - "10.21.200.3" # work dns
         - "8.8.8.8" # google dns
         - "8.8.4.4" # google dns
#paris
#      nameserver1: 10.21.200.3
#      nameserver2: 10.25.200.3
#gdynia
#      nameserver1: 10.7.109.27
#      nameserver2: 10.7.111.244

#Below ntp role is included in administration role
#- name: Apply ntp configuration to all nodes
#  hosts: all
#  gather_facts: false
#  remote_user: root
##  connection: local
#
#  roles:
#    - geerlingguy.ntp
#
#  vars:
#       ntp_timezone: Europe/Paris

#Below firewall role is included in administration role
#- name: Apply firewall configuration to all nodes
#  hosts: Ubuntu-12*:Ubuntu-14*
#  gather_facts: false
#  remote_user: root
##  connection: local
#
#  roles:
#    - geerlingguy.firewall
#
#  vars:
#       firewall_allowed_tcp_ports:
###
#       - "21" #FTP
#       - "22" #SSH
#       - "25" #SMTP
#       - "80" #HTTP / Nginx
#       - "82" #Varnish or Google +
#       - "123" #DNS
#       - "443" #HTTPS
#       - "2222" #SSH alternate
#       - "3306" #Mysql
#       - "3689" #FireFly
#       - "4040" #Subsonic
#       - "4444" #Selenium
#       - "4445" #Lumbermill/Selenium TODO???????
#       - "4243" #Docker
#       - "4949" #Munin
#       - "5000" #xrdp / Openstack
#       - "5001" #xrdp
#       - "5050" #CouchPatato
#       - "6000" #Logstash
#       - "6082" #Varnish admin
#       - "7000" #FreeNas
#       - "7070" #Apache
#       - "7071" #Apache redirect gearman
#       - "7072" #Apache redirect jenkins
#       - "7073" #Apache redirect nabla
#       - "7074" #Apache redirect visma
#       - "7075" #Apache redirect sample
#       - "7076" #Apache redirect ?????
#       - "7077" #Apache redirect ansible tower (WAS)
#       - "8021" #FTP FreeNas
#       - "8081" #Nexus
#       - "8084" #OwnCloud
#       - "8085" #Fitness
#       - "8060" #Atlassion Fisheye
#       - "8082" #Atlassian JIRA
#       - "8083" #SickBeard
#       - "8080" #HTTP alternate (often used with Tomcat)
#       - "8091" #Transmission
#       - "8095" #Atlassion Crowd
#       - "8180" #JBoss
#       - "8181" #HeadPhone/JBoss http debug port
#       - "8200" #MiniDLNA
#       - "8280" #Tomcat HTTP
#       - "8380" #Jenkins
#       - "8381" #jenkins FreeNas
#       - "8443" #Tomcat HTTPS TODO???????
#       - "8480" #NGinx
#       - "8787" #JBoss remote debug port
#       - "8983" #Tomcat HTTP TODO???????
#       - "9042" #Supervisor
#       - "9000" #SonarQube
#       - "9090" #SABznbd/Jetty
#       - "9091" #Transmission
#       - "9990" #Jboss console
#       - "9200" #Elasticsearch
#       - "10000" #Webmin
#       - "20000" #Usermin
#       - "24800" #Synergy
#       - "32400" #Plex
#Do not enable
#       - "139" #Samba/NetBIOS
#       - "445" #Samba/NetBIOS
#       - "17500" #DropBox
#       firewall_allowed_udp_ports:
#Do not enable
#       - "137" #Samba/NetBIOS
#       - "138" #Samba/NetBIOS
#
#       firewall_additional_rules:
#        - "iptables -A INPUT -i wlan1 -p udp -m udp -s mafreebox.freebox.fr -j ACCEPT" #Freebox tv
#        - "iptables -A OUTPUT -o wlan1 -p tcp -m tcp --dport 554 -j ACCEPT" #Freebox tv

- name: Apply security configuration
  hosts: security
  remote_user: root
#  connection: local

  roles:
    - security

  vars:
       sudoers_enabled: no

#Below cmake role is included in cpp role
#- name: Install cmake
#  hosts: cmake
#  remote_user: root
##  connection: local
#
#  roles:
#    - alban.andrieu.cmake

- name: Install cpp
  hosts: cpp
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.cpp

  vars:
      gcc_version: "4:4.8.2-1ubuntu6"
      cppunit_version: "1.13-0"
      boost_version: "1.54"

- name: Install java
  hosts: java
  remote_user: root
#  connection: local

  roles:
    - java

#- name: Install virtualbox
#  hosts: virtualbox
#  remote_user: root
##  connection: local
#
#  roles:
#    - virtualbox
#
#  vars:
#      virtualbox_package_name: virtualbox
#      virtualbox_dkms_enable: no

- name: Install vagrant
  hosts: vagrant
  remote_user: root
#  connection: local

  roles:
    - vagrant

  vars:
       vagrant_libvirt_enabled: false
       vagrant_windows_enabled: false
#      vagrant_url: https://dl.bintray.com/mitchellh/vagrant/vagrant_1.6.3_x86_64.deb

- name: Install docker
  hosts: docker
  remote_user: root
#  connection: local
  roles:
    - docker

- name: Install locale
  hosts: locale
  remote_user: root
#  connection: local

  roles:
    - locale

- name: Install zabbix-agent
  hosts: zabbix-agent
  remote_user: root
#  connection: local

  roles:
    - zabbix-agent

  vars:
      zabbix_agent_major: '2'
      zabbix_agent_minor: '2'
      zabbix_agent_revision: '7'
      zabbix_agent_ubuntu: "1:{{zabbix_agent_version}}-1+trusty"
      #zabbix_agent_Server: 127.0.0.1

- name: Install webmin
  hosts: webmin
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.webmin

  vars:
      docker_files_enable: yes
      docker_files_generated_directory: "roles/alban.andrieu.webmin"

- name: Install nexus
  hosts: nexus
  remote_user: root
#  connection: local

  roles:
    - nexus

  vars:
      nexus_home: "/usr/local/{{nexus_user}}"

- name: Install xvbf
  hosts: xvbf
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.xvbf

- name: Install selenium
  hosts: selenium
  remote_user: root
#  connection: local

  roles:
     - alban.andrieu.selenium

#
#- name: Install zfs
#  hosts: zfs
#  remote_user: root
##  connection: local
#
#  roles:
#    - alban.andrieu.zfs

#Use below only if you want your servers to be part of build farm
- name: Apply administration configuration to all nodes
  hosts: Ubuntu-12*:Ubuntu-14*
  gather_facts: false
  remote_user: root
  connection: local

  roles:
    - alban.andrieu.administration

  vars:
       ntp_timezone: Europe/Paris

#Below dropbox is included in workstation role
#- name: Install dropbox
#  hosts: workstation
#  remote_user: root
##  sudo: yes
##  sudo_user: "{{ user }}"
##  connection: local
#
#  roles:
#    - dropbox
#
#  vars:
#       docker_files_enable: yes
#       docker_files_generated_directory: "roles/alban.andrieu.dropbox"

- name: Install workstation add-on
  hosts: workstation
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.workstation

  vars:
       dropbox_user_directory: "/workspace/Dropbox"
       dropbox_user_host: "2366450895"
       nodejs_enabled: false
       variety_owner: "{{ user }}"
       variety_group: "{{ group }}"
       dropbox_owner: "{{ user }}"
       dropbox_group: "{{ group }}"

#- name: Apply swarm configuration to all jenkins slaves
#  hosts: jenkins-swarm
#  remote_user: root
##  connection: local
#
#  vars_prompt:
#  - name: jenkins_username
#    prompt: "What is your jenkins user?"
#    private: no
#  - name: jenkins_password
#    prompt: "What is your jenkins password?"
#    private: yes
#
#  roles:
#    - jenkins-swarm
#
#  vars:
#       docker_files_enable: yes,
#       docker_files_generated_directory: "roles/alban.andrieu.jenkins-swarm",

# This playbook deploys a simple standalone Tomcat 7 server.
- name: Deploy Tomcat
  hosts: tomcat-servers
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.tomcat

# This playbook deploys a simple standalone JBoss server.

- name: Deploy Jboss
  hosts: jboss-servers
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.jboss

## This playbook deploys a MySQL database.
#- name: Deploy MySQL and configure the databases
#  hosts: mysql-servers
#  remote_user: root
##  connection: local
#
#  roles:
#    - geerlingguy.mysql
#
#  vars:
#       mysql_innodb_log_file_size: "5M"
#       mysql_root_username: root
#       mysql_root_password: microsoft
#
## This playbook deploys an Apache database.
#- name: Deploy Apache and configure the server
#  hosts: apache-servers
#  remote_user: root
##  connection: local
#
#  roles:
#    - geerlingguy.apache
#
#  vars:
#       apache_listen_port: 7070
#
#- name: Add dependencies for Apache like PHP
#  hosts: apache-servers
#  remote_user: root
##  connection: local
#
#  roles:
#    - geerlingguy.php
#    - geerlingguy.php-mysql
#
#  vars:
#       php_date_timezone: "Europe/Paris"
#
#- name: Add admin tool for Apache like PHPmyAdmin
#  hosts: apache-servers
#  remote_user: root
##  connection: local
#
#  roles:
#    - geerlingguy.phpmyadmin
#
#  vars:
#       phpmyadmin_mysql_user: root
#       phpmyadmin_mysql_password: microsoft
#       phpmyadmin_mysql_port: 7070
#       apache_listen_port: 7070
#       php_date_timezone: "Europe/Paris"
#       mysql_innodb_log_file_size: "5M"
#       mysql_root_username: root
#       mysql_root_password: microsoft

#WARNING jenkins-master role has disabled a2dissite 000-default
- name: Configure and deploy the nabla php sample application code to apache
  hosts: nabla-servers
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.web

  vars:
       apache_listen_port: 7070
       #jenkins_proxy_port: "{{ apache_listen_port }}" #TODO why is it needed!!!
       phpmyadmin_mysql_user: root
       phpmyadmin_mysql_password: microsoft
       phpmyadmin_mysql_port: "{{ apache_listen_port }}"
       php_date_timezone: "Europe/Paris"
       mysql_innodb_log_file_size: "5M"
       mysql_root_username: root
       mysql_root_password: microsoft
       docker_files_enable: yes
       docker_files_generated_directory: "roles/alban.andrieu.web"

- name: Install pagespeed
  hosts: apache-servers
  remote_user: root
#  connection: local
  roles:
    - role: alban.andrieu.pagespeed

  vars:
       pagespeed_package_arch: "amd64"

- name: Apply configuration to jenkins master
  hosts: jenkins-master
  remote_user: root
#  connection: local

  roles:
    - role: jenkins-master

  vars:
      docker_files_generated_directory: "roles/jenkins-master"
      docker_files_enable: yes
      jenkins_proxy: apache
      jenkins_proxy_hostname: jenkins.myhost.com
#      jenkins_ssh_key_file: "~/.ssh/id_rsa.pub"
      jenkins_http_port: 8380
      jenkins_proxy_port: 7070
#      jenkins_home: /jenkins
      jenkins_java_args:
        - "-Xmx1024m"
        - "-XX:MaxPermSize=512m"
        - "-Djava.awt.headless=true"
      jenkins_prefix: "/jenkins"
      jenkins_plugins:
        - "ws-cleanup"
        - "envinject"
        - "artifactdeployer"
        - "nodenamecolumn"
        - "summary_report"
        - "publish-over-cifs"
        - "progress-bar-column-plugin"
        - "thinBackup"
        - "token-macro"
        - "jobConfigHistory"
        - "scons"
        - "downstream-buildview"
        - "scm-sync-configuration"
        - "deploy"
        - "docker-plugin"
        - "build-publisher"
        - "sonar"
        - "xvfb"
        - "windows-slaves"
        - "m2release"
        - "git"
        - "scm-api"
        - "maven-repo-cleaner"
        - "ssh-agent"
        - "clover"
        - "environment-script"
        - "stepcounter"
        - "plugin-usage-plugin"
        - "jenkins-cloudformation-plugin"
        - "cvs"
        - "jira"
        - "JiraTestResultReporter"
        - "checkmarx"
        - "selenium"
        - "sonatype-ci"
        - "jobtype-column"
        - "findbugs"
        - "batch-task"
        - "warnings"
        - "violation-columns"
        - "configurationslicing"
        - "parameterized-trigger"
        - "sounds"
        - "job-exporter"
        - "preSCMbuildstep"
        - "fitnesse"
        - "dashboard-view"
        - "gearman-plugin"
        - "jquery-ui"
        - "gatling"
        - "job-node-stalker"
        - "favorite"
        - "build-pipeline-plugin"
        - "postbuild-task"
        - "skip-certificate-check"
        - "maven-info"
        - "crowd2"
        - "disk-usage"
        - "node-iterator-api"
        - "ssh"
        - "stashNotifier"
        - "publish-over-ssh"
        - "sitemonitor"
        - "build-metrics"
        - "promoted-builds"
        - "flexible-publish"
        - "selenium-builder"
        - "tasks"
        - "computer-queue-plugin"
        - "saferestart"
        - "throttle-concurrents"
        - "ant"
        - "countjobs-viewstabbar"
        - "email-ext"
        - "credentials"
        - "cobertura"
        - "nodejs"
        - "audit-trail"
        - "svnpublisher"
        - "text-finder-run-condition"
        - "versioncolumn"
        - "global-build-stats"
        - "plot"
        - "jquery"
        - "svn-tag"
        - "show-build-parameters"
        - "conditional-buildstep"
        - "copy-to-slave"
        - "maven-plugin"
        - "view-job-filters"
        - "jshint-checkstyle"
        - "rebuild"
        - "matrix-project"
        - "performance"
        - "copyartifact"
        - "speaks"
        - "groovy"
        - "svn-revert-plugin"
        - "ldap"
        - "claim"
        - "docker-build-step"
        - "hudson-jirareporter-plugin"
        - "nodelabelparameter"
        - "ansicolor"
        - "translation"
        - "sidebar-link"
        - "bulk-builder"
        - "jenkins-jira-issue-updater"
        - "checkstyle"
        - "mttr"
        - "ssh-slaves"
        - "swarm"
        - "ssh-credentials"
        - "subversion"
        - "antisamy-markup-formatter"
        - "covcomplplot"
        - "trac"
        - "testng-plugin"
        - "greenballs"
        - "test-stability"
        - "external-monitor-job"
        - "docker-build-publish"
        - "any-buildstep"
        - "project-stats-plugin"
        - "timestamper"
        - "build-name-setter"
        - "build-timeout"
        - "prereq-buildstep"
        - "caliper-ci"
        - "pmd"
        - "lastsuccessversioncolumn"
        - "ec2"
        - "dry"
        - "analysis-collector"
        - "analysis-core"
        - "insight-ci"
        - "description-setter"
        - "publish-over-ftp"
        - "groovy-postbuild"
        - "hudson-apiv2-plugin"
        - "build-environment"
        - "seleniumrc-plugin"
        - "git-client"
        - "monitoring"
        - "text-finder"
        - "ftppublisher"
        - "built-on-column"
        - "run-condition"
        - "lastfailureversioncolumn"
        - "mask-passwords"
        - "hp-application-automation-tools-plugin"
        - "project-description-setter"
        - "build-with-parameters"
        - "svnmerge"
        - "git-parameter"
        - "javadoc"
        - "build-failure-analyzer"
        - "confluence-publisher"
        - "html5-notifier-plugin"
        - "violations"
        - "next-executions"
        - "matrix-auth"
        - "testInProgress"
        - "copy-data-to-workspace-plugin"
        - "mailer"
        - "next-build-number"
        - "qc"
        - "multiple-scms"
        - "job-import-plugin"
        - "files-found-trigger"
        - "compact-columns"
        - "build-keeper-plugin"
        - "pam-auth"
        - "log-parser"
        - "locale"
        - "all-changes"
        - "dependencyanalyzer"
        - "WebSVN2"
        - "SquishPlugin"
        - "slave-status"
#      jenkins_jobs:
#        - name: test
#          action: delete

- name: Apply common configuration to all jenkins slaves
  hosts: jenkins-slaves
  remote_user: root
#  connection: local

#  vars_files:
#  - [ "roles/alban.andrieu.jenkins-slave/vars/{{ ansible_distribution }}-{{ ansible_architecture }}.yml", "roles/alban.andrieu.jenkins-slave/vars/{{ ansible_distribution }}.yml" ]

  roles:
    - alban.andrieu.jenkins-slave

  vars:
    docker_files_enable: yes
    docker_files_generated_directory: "roles/alban.andrieu.jenkins-slave"
#    jenkins_home: "/jenkins"
#    jenkins_slave_home: "/kgr-mvn"
    jenkins_jdk7_enable: yes
    shell_git_machine: 82.231.208.223
    shell_git_login: jenkins
    shell_git_password: microsoft
    shell_git_email: "alban.andrieu@free.fr"

- name: Install maven
  hosts: maven
  remote_user: root
#  connection: local

  roles:
    - maven

- name: Install css
  hosts: css
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.css

- name: Install chrome
  hosts: chrome
  remote_user: root
#  connection: local

  roles:
     - role: chrome

  vars:
       google_talkplugin_enabled: yes                       # Enable module
       google_agent_pkg_state: installed # Package states: present or installed or latest

- name: Install nodejs
  hosts: nodejs
  remote_user: root
#  connection: local

  roles:
    - nodejs

  vars:
       nodejs_install_packages: false
       nodejs_global_packages: []

- name: configure supervisor
  hosts: supervisors
  remote_user: root
#  connection: local
  roles:
    - role: supervisor

# start a basic python http server on port 8000
  vars:
      name: webserver
      command: python -m SimpleHTTPServer 8000
      directory: /opt/test
# user is the same as base_admin_username
      user: root
      stopsignal: HUP

#- name: configure supervisor
#  hosts: supervisors
#  remote_user: root
##  connection: local
#  roles:
#    - role: supervisor
#      name: fitness
#      command: /workspace/xebium/run.sh
#      directory: /workspace/xebium
## user is the same as base_admin_username
#      user: ubuntu

- name: Install sonar
  hosts: sonar
  remote_user: root
#  connection: local
  roles:
    - role: sonar

  vars:
#TODO merge sonar-runner.properties.j2 file from jenkins_slave role
      sonar_analyzer_runner_install: false
#Handle by jenkins_slave role, Warning it will override settings.xml.j2 from jenkins_slave role
      maven_install: false
      sonar_mysql_install: true
      sonar_jdbc_driver: "mysql"
      sonar_jdbc_port: 3306
      mysql_root_username: root
      mysql_root_password: microsoft
      sonar_jdbc_pass: "{{ mysql_root_password }}"
      sonar_login_user: "{{ mysql_root_username }}"
      sonar_login_password: "{{ mysql_root_password }}"
      sonar_shell: "/bin/false"

#Below cmake conky is included in workstation role
#- name: Install conky
#  hosts: workstation
#  remote_user: root
##  connection: local
#  roles:
#    - role: alban.andrieu.conky

- name: Install git
  hosts: workstation
  remote_user: root
#  connection: local

  roles:
    - role: geerlingguy.git

- name: Install subversion
  hosts: workstation
  remote_user: root
#  connection: local

  roles:
    - role: alban.andrieu.subversion

  vars:
      subversion_owner: "{{ user }}"
      subversion_group: "{{ group }}"

#- name: Apply user shell configuration
#  hosts: workstation
#  remote_user: root
##  connection: local
#
#  vars_files:
#  - [ "roles/alban.andrieu.shell/defaults/main.yml" ]
#  - [ "roles/alban.andrieu.shell/vars/default.yml" ]
#  - [ "roles/alban.andrieu.shell/vars/version.yml" ]
#  - [ "roles/alban.andrieu.shell/vars/custom-{{ ansible_distribution }}-{{ ansible_architecture }}.yml", "roles/alban.andrieu.shell/vars/custom-{{ ansible_distribution }}.yml" ]
#
#  roles:
#    - role: alban.andrieu.shell
#
#  vars:
#      docker_files_generated_directory: "roles/alban.andrieu.shell"
#      docker_files_enable: yes
#      shell_owner: "{{ user }}"
#      shell_group: "{{ group }}"
##      shell_owner_home: "{{ home }}"
##      shell_env_directory: "{{ home }}/env/tmp"
##      rhosts_hosts: []

#- name: Install eclipse
#  connection: local
#  hosts: workstation
#  remote_user: root
#
#  roles:
#    - role: alban.andrieu.eclipse
#
#  vars:
#      docker_files_generated_directory: "roles/alban.andrieu.eclipse"
#      docker_files_enable: yes
#      #eclipse_base_dir: /workspace/eclipse
#      #user: "albandri"
#      #home: "/workspace/users/albandri10"

- name: Install zap
  connection: local
  hosts: workstation
  remote_user: root
#  connection: local
  roles:
    - role: alban.andrieu.zap

  vars:
      docker_files_generated_directory: "roles/alban.andrieu.zap"
      docker_files_enable: yes

- name: Install jmeter
  hosts: workstation
  remote_user: root
#  connection: local
  roles:
    - role: alban.andrieu.jmeter

#- name: Install mon
#  hosts: workstation
#  remote_user: root
##  connection: local
#
#  roles:
#    - alban.andrieu.mon
#
#  vars:
#      mon_localhost : "albandri"
#      mon_custom_group: "nabla"
#      mon_admin_email: "alban.andrieu@free.fr"
#      mon_weekly_email: "team@free.fr"
#      user: root
#      home: "/root"
