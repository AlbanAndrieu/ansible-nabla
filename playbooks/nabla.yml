---
#sudo ansible-playbook -i hosts-albandri -c local -v nabla.yml -vvvv --ask-become-pass | tee setup.log

- hosts: all
  gather_facts: true
  tasks:
    - name: group hosts by distribution
      group_by: key="{{ ansible_distribution }}-{{ ansible_distribution_version }}"

- hosts: RedHat-7*:RedHat-6*:RedHat-5*:CentOS-7*:CentOS-6*:Ubuntu-17*:Ubuntu-16*:Ubuntu-15*:Ubuntu-14*:Ubuntu-13*:Ubuntu-12*
  gather_facts: false
  tasks:
    - name: group hosts for supported distributions
      group_by: key="supported"

- hosts: "!supported"
  gather_facts: false
  tasks:
    - name: fail for unsupported distribution
      fail: msg="{{ ansible_distribution }} {{ ansible_distribution_version }}
                 is not a supported OS for a Tower installation.  Supported
                 OSes include Red Hat Enterprise Linux 6/7/5, CentOS 6, or
                 Ubuntu 12.04/13.04/14.04/15.04/16.04/17.04."
    - debug: msg="Version {{ ansible_distribution }} {{ ansible_distribution_version }} {{ ansible_architecture }}"

- hosts: localhost

  tasks:
    - name: Install Ansible-Galaxy dependencies
      shell: ansible-galaxy install -r requirements.yml -p ./roles/
      #shell: ansible-galaxy install -r requirements.yml -p ./roles/ --ignore-errors --force
      ignore_errors: yes

- name: Bootstrap python onto server
  hosts: Ubuntu-17*:Ubuntu-16*:Ubuntu-14*:Ubuntu-13*:Ubuntu-12*
#  become: true

  pre_tasks:
  - name: Install python 2 if not there
    raw: |
      test -e /usr/bin/python || \
      (apt -y update && apt install -y python-simplejson)
    register: output
    changed_when: output.stdout|trim() != ""

  - name: Install sudo if not there
    become: true
    raw: |
      test -e /usr/bin/sudo || apt install -y sudo
    register: output
    changed_when: output.stdout|trim() != ""

- name: Add repo configuration to all nodes
  hosts: RedHat-7*:RedHat-6*:CentOS-6*
  gather_facts: false
  remote_user: root
#  connection: local

  roles:
    - geerlingguy.repo-epel
    - geerlingguy.repo-remi

#- name: Apply hostname configuration
#  hosts: all
#  remote_user: root
##  connection: local
#
#  roles:
#    - alban.andrieu.hostname

- name: Apply common configuration to all nodes
  hosts: Ubuntu-17*:Ubuntu-16*:Ubuntu-15*:Ubuntu-14*:Ubuntu-13*:Ubuntu-12*
  gather_facts: false
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.common

  vars:
       apt_notification_email: "alban.andrieu@free.fr"
       apt_upgrade_system_enabled: no

- include: dns.yml

#Below ntp role is included in administration role
#- name: Apply ntp configuration to all nodes
#  hosts: all
#  gather_facts: false
#  remote_user: root
##  connection: local
#
#  roles:
#    - geerlingguy.ntp
#
#  vars:
#       ntp_timezone: Europe/Paris

#- import_playbook: firewall.yml

#- name: Apply security configuration
#  hosts: security
#  remote_user: root
##  connection: local
#
#  roles:
#    - security
#
#  vars:
#       sudoers_enabled: no
#       restart_ssh_enabled: false

- name: Apply login configuration
  hosts: security
  remote_user: root
#  connection: local

  roles:
    - ansible-login

  vars:
       login_umask: 077
       login_usergroups_enab: 'no'

#Below cmake role is included in cpp role
#- name: Install cmake
#  hosts: cmake
#  remote_user: root
##  connection: local
#
#  roles:
#    - alban.andrieu.cmake

#Below scons role is included in cpp role
#- name: Install scons
#  hosts: scons
#  remote_user: root
##  connection: local
#
#  roles:
#    - alban.andrieu.scons

#Below gcc role is included in cpp role
- name: Install gcc
  hosts: gcc
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.gcc

  vars:
      gcc_version: "=4:4.8.2-1ubuntu6"
      gcc_priority: 10

- name: Install cpp
  hosts: cpp
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.cpp

  vars:
      cppunit_version: "1.13-0"
      boost_version: "1.54"

- import_playbook: java.yml

#- name: Install virtualbox
#  hosts: virtualbox
#  remote_user: root
##  connection: local
#
#  roles:
#    - virtualbox
#
#  vars:
#      virtualbox_package_name: virtualbox
#      virtualbox_dkms_enable: no

- name: Install vagrant
  hosts: vagrant
  remote_user: root
#  connection: local

  roles:
    - vagrant

  vars:
       vagrant_libvirt_enabled: false
       vagrant_windows_enabled: false
#      vagrant_url: https://dl.bintray.com/mitchellh/vagrant/vagrant_1.6.3_x86_64.deb

- name: Install docker
  hosts: docker
  remote_user: root
#  connection: local
  roles:
    - docker

  vars:
       docker_opts: "-H tcp://127.0.0.1:4243 -H unix:///var/run/docker.sock --dns 8.8.8.8 --dns 8.8.4.4 --storage-driver=overlay"

- name: Install locale
  hosts: locale
  remote_user: root
#  connection: local

  roles:
    - locale

#- import_playbook: zabbix.yml

- name: Install webmin
  hosts: webmin
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.webmin

  vars:
      docker_files_enable: yes
      docker_files_generated_directory: "../roles/alban.andrieu.webmin"

- name: Install xvbf
  hosts: xvbf
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.xvbf

- name: Install selenium
  hosts: selenium
  remote_user: root
#  connection: local

  roles:
     - alban.andrieu.selenium

#
#- name: Install zfs
#  hosts: zfs
#  remote_user: root
##  connection: local
#
#  roles:
#    - alban.andrieu.zfs

#Use below only if you want your servers to be part of build farm
- name: Apply administration configuration to all nodes
  hosts: Ubuntu-17*:Ubuntu-16*:Ubuntu-15*:Ubuntu-14*:Ubuntu-13*:Ubuntu-12*
  gather_facts: false
  remote_user: root
  connection: local

  roles:
    - alban.andrieu.administration

  vars:
       ntp_timezone: Europe/Paris

#Below dropbox is included in workstation role
#- name: Install dropbox
#  hosts: workstation
#  remote_user: root
##  sudo: yes
##  sudo_user: "{{ user }}"
##  connection: local
#
#  roles:
#    - dropbox
#
#  vars:
#       docker_files_enable: yes
#       docker_files_generated_directory: "../roles/alban.andrieu.dropbox"

#- import_playbook: workstation.yml

#- name: Apply swarm configuration to all jenkins slaves
#  hosts: jenkins-swarm
#  remote_user: root
##  connection: local
#
#  vars_prompt:
#  - name: jenkins_username
#    prompt: "What is your jenkins user?"
#    private: no
#  - name: jenkins_password
#    prompt: "What is your jenkins password?"
#    private: yes
#
#  roles:
#    - jenkins-swarm
#
#  vars:
#       docker_files_enable: yes,
#       docker_files_generated_directory: "../roles/alban.andrieu.jenkins-swarm",

#- import_playbook: nexus.yml

# This playbook deploys a simple standalone Tomcat 7 server.
- name: Deploy Tomcat
  hosts: tomcat-servers
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.tomcat

  vars:
       tomcat_started_check_enable: no

# This playbook deploys a simple standalone JBoss server.

- name: Deploy Jboss
  hosts: jboss-servers
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.jboss

#- import_playbook: lamp.yml

#WARNING jenkins-master role has disabled a2dissite 000-default
- name: Configure and deploy the nabla php sample application code to apache
  hosts: nabla-servers
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.web

  vars:
       apache_listen_port: 7070
       #jenkins_proxy_port: "{{ apache_listen_port }}" #TODO why is it needed!!!
       phpmyadmin_mysql_user: root
       phpmyadmin_mysql_password: microsoft
       phpmyadmin_mysql_port: "{{ apache_listen_port }}"
       php_date_timezone: "Europe/Paris"
       mysql_innodb_log_file_size: "5M"
       mysql_root_username: root
       mysql_root_password: microsoft
       docker_files_enable: yes
       docker_files_generated_directory: "../roles/alban.andrieu.web"

- name: Install pagespeed
  hosts: apache-servers
  remote_user: root
#  connection: local
  roles:
    - role: alban.andrieu.pagespeed

  vars:
       apache_listen_port: 7070
       pagespeed_package_arch: "amd64"

- name: Install evasive
  hosts: apache-servers
  remote_user: root
#  connection: local
  roles:
    - role: alban.andrieu.evasive

  vars:
       apache_listen_port: 7070

- name: Install awstats
  hosts: apache-servers
  remote_user: root
#  connection: local
  roles:
    - role: alban.andrieu.awstats

  vars:
       apache_listen_port: 7070

#- import_playbook: jenkins-master.yml

- import_playbook: maven.yml

#- import_playbook: jenkins-slave.yml

- name: Install css
  hosts: css
  remote_user: root
#  connection: local

  roles:
    - alban.andrieu.css

- import_playbook: chrome.yml

- import_playbook: nodejs.yml

- name: configure supervisor
  hosts: supervisors
  remote_user: root
#  connection: local
  roles:
    - role: supervisor

# start a basic python http server on port 8000
  vars:
      name: webserver
      command: python -m SimpleHTTPServer 8000
      directory: /opt/test
# user is the same as base_admin_username
      user: root
      stopsignal: HUP

#- name: configure supervisor
#  hosts: supervisors
#  remote_user: root
##  connection: local
#  roles:
#    - role: supervisor
#      name: fitness
#      command: /workspace/xebium/run.sh
#      directory: /workspace/xebium
## user is the same as base_admin_username
#      user: ubuntu

#- import_playbook: sonar.yml

#Below cmake conky is included in workstation role
#- name: Install conky
#  hosts: workstation
#  remote_user: root
##  connection: local
#  roles:
#    - role: alban.andrieu.conky

- name: Install git
  hosts: workstation
  remote_user: root
#  connection: local

  roles:
    - role: geerlingguy.git

- name: Install subversion
  hosts: workstation
  remote_user: root
  ignore_errors: true

  roles:
    - role: alban.andrieu.subversion

  vars:
      subversion_owner: "{{ user }}"
      subversion_group: "{{ group }}"

#- name: Apply user shell configuration
#  hosts: workstation
#  remote_user: root
##  connection: local
#
#  vars_files:
#  - [ "roles/alban.andrieu.shell/defaults/main.yml" ]
#  - [ "roles/alban.andrieu.shell/vars/default.yml" ]
#  - [ "roles/alban.andrieu.shell/vars/version.yml" ]
#  - [ "roles/alban.andrieu.shell/vars/custom-{{ ansible_distribution }}-{{ ansible_architecture }}.yml", "roles/alban.andrieu.shell/vars/custom-{{ ansible_distribution }}.yml" ]
#
#  roles:
#    - role: alban.andrieu.shell
#
#  vars:
#      docker_files_generated_directory: "../roles/alban.andrieu.shell"
#      docker_files_enable: yes
#      newrelic_license_key: de35bf5d191ebb208d359b2cd24a60616a02b1f3
#      shell_owner: "{{ user }}"
#      shell_group: "{{ group }}"
##      shell_owner_home: "{{ home }}"
##      shell_env_directory: "{{ home }}/env/tmp"
##      rhosts_hosts: []

#- name: Install eclipse
#  connection: local
#  hosts: workstation
#  remote_user: root
#
#  roles:
#    - role: alban.andrieu.eclipse
#
#  vars:
#      docker_files_generated_directory: "../roles/alban.andrieu.eclipse"
#      docker_files_enable: yes
#      #eclipse_base_dir: /workspace/eclipse
#      #user: "albandri"
#      #home: "/workspace/users/albandri10"

- name: Install sublimetext
  connection: local
  hosts: workstation
  remote_user: root
#  accelerate: true
  roles:
    - { role: alban.andrieu.sublimetext,
      }

#- name: Install zap
#  connection: local
#  hosts: workstation
#  remote_user: root
#
#  roles:
#    - role: alban.andrieu.zap
#
#  vars:
#      docker_files_generated_directory: "../roles/alban.andrieu.zap"
#      docker_files_enable: yes

- name: Install jmeter
  connection: local
  hosts: workstation
  remote_user: root
  roles:
    - role: alban.andrieu.jmeter

#- name: Install mon
#  hosts: workstation
#  remote_user: root
##  connection: local
#
#  roles:
#    - alban.andrieu.mon
#
#  vars:
#      apache_listen_port: 7070
#      mon_localhost : "albandri"
#      mon_custom_group: "nabla"
#      mon_admin_email: "alban.andrieu@free.fr"
#      mon_weekly_email: "team@free.fr"
#      user: root
#      home: "/root"

- name: Install jdiskreport
  connection: local
  hosts: workstation
  remote_user: root
#  accelerate: true

  roles:
    - { role: alban.andrieu.jdiskreport,
      }

- name: Install private-bower
  connection: local
  hosts: workstation
  remote_user: root
#  accelerate: true
  roles:
    - { role: alban.andrieu.private-bower,
      }

- name: Install OWASP tools
  connection: local
  hosts: workstation
  remote_user: root
#  accelerate: true
  roles:
    - { role: alban.andrieu.owasp-wte,
      }
