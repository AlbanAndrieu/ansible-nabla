---
# Playbook to run automatic configuration (or removal) of Jenkins nodes via REST API
#
# This playbook depends on python requests library, local connection and custom modules
# in the ansible ./library directory. It is best run from repository root, so that
# configuration file (ansible.cfg) is available.
#
# To add or reconfigure host use label state=present, to remove host use state=absent.
# Removing node has to be done only once. Jenkins is configured as the default server.
#
# Usage
# $ ansible-playbook -i inventory/staging playbooks/jenkins_node.yml
# $ ansible-playbook -i inventory/staging -e username=jenkins -e password=*** playbooks/jenkins_node.yml
- hosts: localhost
  gather_facts: no
  vars_prompt:
  - name: "username"
    prompt: "User which has permissions to create new nodes on Jenkins"
  - name: "password"
    prompt: "Password for Jenkins user"
  tasks:
  - name: Request CSRF token from Jenkins
    jenkins_csrf_token:
      auth:
        username: "{{ username }}"
        password: "{{ password }}"
    register: csrf

  - name: Debug Jenkins-Crumb
    debug:
      msg: "CSRF token: {{ csrf.token }}"

  - name: Reconfigure docker-inside and docker-compose nodes UBUNTU 16
    jenkins_node:
      hostname: "{{ item }}"
      state: present
      nodeDescription: |
        Node automatically configured by Ansible.
        Do not change configuration manually, use jenkins_node.yml playbook.
      labels:
      - docker-inside
      - docker-compose
      - ubuntu16
      numExecutors: 2
      env:
      - key: OS_ARCH
        value: x86Linux
      credentialsId: 1234
      remoteFS: /data/jenkins
      x_token: "{{ csrf.token }}"
      x_auth:
        username: "{{ username }}"
        password: "{{ password }}"
    with_sequence: start=75 end=82 format=00%i

  - name: Reconfigure Jenkins nodes jenkins server WINDOWS
    jenkins_node:
      hostname: "{{ item }}"
      state: present
      nodeDescription: |
        Node automatically configured by Ansible.
        Do not change configuration manually, use jenkins_node.yml playbook.
      labels:
      - compil-winnt
      - compil-winnt-kles
      - compil-winnt-kles-64b
      - windows-pipeline
      - windows-vm
      numExecutors: 1
      env:
      - key: ARCH
        value: winnt
      - key: JAVA_HOME
        value: "C:\\Program Files\\Java\\jdk1.7.0_80"
      - key: SCONS
        value: scons
      - key: HOME
        value: "C:\\Users\\jenkins"
      - key: SHELL
        value: "/usr/bin/bash"
      tools:
      - key: "hudson.model.JDK$DescriptorImpl@java-latest"
        home: "C:\\Program Files\\Java\\jdk1.8.0_201"
      - key: "hudson.model.JDK$DescriptorImpl@jdk-17"
        home: "C:\\Program Files\\Java\\jdk1.7.0_80"
      - key: "hudson.model.JDK$DescriptorImpl@jdk-18"
        home: "C:\\tools\\jdk_8u201"
      credentialsId: 1234
      agentLauncher: "hudson.slaves.JNLPLauncher"
      remoteFS: "C:\\jenkins"
      x_jenkins_server: "nabla/jenkins"
      x_token: "{{ csrf.token }}"
      x_auth:
        username: "{{ username }}"
        password: "{{ password }}"
    with_items:
    - TEST1
    - TEST2
