#ansible-playbook -i hosts-albandri -v albandri.yml --limit albandri-laptop-work -c local --ask-become-pass -vvvv | tee setup.log
# -c local  --ask-pass --ask-become-pass --sudo
#ansible all -m setup -i hosts-albandri --limit albandri-laptop-work -vvvv

- name: Assert platform is supported
  hosts: all
  remote_user: albandri
  gather_facts: true

  tasks:
    - name: Assert platform is supported
      assert:
        that:
          - ansible_os_family in ['Debian', 'RedHat', 'CentOS', 'Windows', 'Solaris']
          - ansible_architecture in ['x86_64']

#supported version
#Solaris
##  when: ((ansible_distribution == 'Solaris') and (ansible_distribution_version not in ['11.1']))
#  when: ansible_distribution_release is defined and ansible_distribution_release == 'Solaris 10 10/08 s10x_u6wos_07b X86'
#  when: ansible_distribution_release is defined and ansible_distribution_release == 'Oracle Solaris 10 9/10 s10x_u9wos_14a X86'
#  when: ansible_distribution_release is defined and ansible_distribution_release == 'Oracle Solaris 10 1/13 s10x_u11wos_24a X86'
#SPARC
#  when: ansible_distribution_release is defined and ansible_distribution_release == 'Solaris 10 10/08 s10s_u6wos_07b SPARC'
#  when: ansible_distribution_release is defined and ansible_distribution_release == 'Oracle Solaris 10 1/13 s10s_u11wos_24a SPARC'
#REDHAT
#  when: ansible_distribution == 'RedHat' and ansible_lsb.major_release|int >= 5
#  when: ansible_distribution == 'RedHat' and ansible_distribution_major_version == "5"
#  when: ansible_distribution == 'RedHat' and ansible_distribution_major_version == "6"
#  when: ansible_distribution == 'RedHat' and ansible_distribution_major_version == "7"
#CENTOS
#  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == "6"
#  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == "7"
#UBUNTU
#https://wiki.ubuntu.com/DevelopmentCodeNames
#  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == "12.04"
#  when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'precise'
#  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == "14.04"
#  when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'trusty'
#  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == "16.04"
#  when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'xenial'
#SLES
#  when: ansible_distribution == 'SLES' and ansible_distribution_version == "12"
#Windows
#  when: ansible_os_family == 'Windows' and ansible_os_name == 'Microsoft Windows Server 2008 R2 Enterprise'
#  when: ansible_os_family == 'Windows' and ansible_os_name == 'Microsoft Windows Server 2012 R2 Standard'

- hosts: all
  gather_facts: true
  tasks:
    - name: group hosts by distribution
      group_by: key="{{ ansible_distribution }}-{{ ansible_distribution_version }}"

- hosts: RedHat-7*:RedHat-6*:RedHat-5*:CentOS-7*:CentOS-6*:Ubuntu-17*:Ubuntu-16*:Ubuntu-15*:Ubuntu-14*:Ubuntu-13*:Ubuntu-12*
  gather_facts: false
  tasks:
    - name: group hosts for supported distributions
      group_by: key="supported"

- hosts: "!supported"
  gather_facts: false
  tasks:
    - name: fail for unsupported distribution
      fail: msg="{{ ansible_distribution }} {{ ansible_distribution_version }}
                 is not a supported OS for a Tower installation.  Supported
                 OSes include Red Hat Enterprise Linux 6/7/5, CentOS 6, or
                 Ubuntu 12.04/13.04/14.04/15.04/16.04/17.04."
    - debug: msg="Version {{ ansible_distribution }} {{ ansible_distribution_version }} {{ ansible_architecture }}"

- hosts: localhost

  tasks:
    - name: Install Ansible-Galaxy dependencies
      shell: ansible-galaxy install -r requirements.yml -p ./roles/
      #shell: ansible-galaxy install -r requirements.yml -p ./roles/ --ignore-errors --force
      ignore_errors: yes

- name: Bootstrap python onto server
  hosts: Ubuntu-17*:Ubuntu-16*:Ubuntu-14*:Ubuntu-13*:Ubuntu-12*
#  become: true

  pre_tasks:
  - name: Install python 2 if not there
    raw: |
      test -e /usr/bin/python || \
      (apt -y update && apt install -y python-simplejson)
    register: output
    changed_when: output.stdout|trim() != ""

  - name: Install sudo if not there
    become: true
    raw: |
      test -e /usr/bin/sudo || apt install -y sudo
    register: output
    changed_when: output.stdout|trim() != ""

- name: Add repo configuration to all nodes
  hosts: RedHat-7*:RedHat-6*:CentOS-7*:CentOS-6*
  gather_facts: false
  remote_user: albandri

  roles:
    - geerlingguy.repo-epel
    - geerlingguy.repo-remi

#- name: Apply hostname configuration
#  hosts: all
#  remote_user: albandri
#
#
#  roles:
#    - alban.andrieu.hostname
#
#  vars:
#       hostname_hostname_loopback: "{{ ansible_hostname }} nabla"

- name: Apply common configuration to all nodes
  hosts: Ubuntu-18*:Ubuntu-17*:Ubuntu-16*:Ubuntu-14*:Ubuntu-13*:Ubuntu-12*
  gather_facts: false
  remote_user: albandri


  roles:
    - alban.andrieu.common

  vars:
       apt_notification_email: "alban.andrieu@free.fr"
       apt_upgrade_system_enabled: no

- include: dns.yml

- include: python.yml

#Below ntp role is included in administration role
- name: Apply ntp configuration to all nodes
  hosts: all
  gather_facts: false
  remote_user: albandri
  become: true


  roles:
    - geerlingguy.ntp

  vars:
       ntp_timezone: Europe/Paris

#Use below only if you want your servers to be part of build farm
- name: Apply administration configuration to all nodes
  hosts: Ubuntu-17*:Ubuntu-16*:Ubuntu-14*:Ubuntu-12*
  gather_facts: false
  remote_user: albandri


  roles:
    - alban.andrieu.administration

- include: firewall.yml

- name: Apply security configuration
  hosts: security
  remote_user: albandri
  become: true


  roles:
    - security

  vars:
      sudoers_enabled: no
      restart_ssh_enabled: false
      security_ssh_password_authentication: "yes"
      security_ssh_permit_root_login: "yes"
      security_ssh_x11_forwarding: "yes"
      security_fail2ban_enabled: false
      security_autoupdate_enabled: false #make yum to get stuck later

#Below cmake role is included in cpp role
#- name: Install cmake
#  hosts: cmake
#  remote_user: albandri
#
#
#  roles:
#    - alban.andrieu.cmake

#Below scons role is included in cpp role
#- name: Install scons
#  hosts: scons
#  remote_user: albandri
#
#
#  roles:
#    - alban.andrieu.scons

- import_playbook: cpp.yml

#- import_playbook: java.yml

- import_playbook: certificate.yml

#- name: Install virtualbox
#  hosts: virtualbox
#  remote_user: albandri
#
#
#  roles:
#    - virtualbox
#
#  vars:
#      virtualbox_package_name: virtualbox
#      virtualbox_dkms_enable: no

- import_playbook: vagrant.yml

#  vars:
#       vagrant_libvirt_enabled: false
#       vagrant_windows_enabled: false
##      vagrant_url: https://dl.bintray.com/mitchellh/vagrant/vagrant_1.6.3_x86_64.deb

- import_playbook: docker.yml

- name: Install locale
  hosts: locale
  remote_user: albandri

  roles:
    - locale

- import_playbook: zabbix-agent.yml

- name: Install xvbf
  hosts: xvbf
  remote_user: albandri


  roles:
    - alban.andrieu.xvbf

- name: Install selenium
  hosts: selenium
  remote_user: albandri


  roles:
     - alban.andrieu.selenium

#
#- name: Install zfs
#  hosts: zfs
#  remote_user: albandri
#
#
#  roles:
#    - alban.andrieu.zfs

#Below dropbox is included in workstation role
#- name: Install dropbox
#  hosts: workstation
#  remote_user: albandri
##  sudo: yes
##  sudo_user: "{{ user }}"
#
#
#  roles:
#    - dropbox
#
#  vars:
#       docker_files_enable: yes
#       docker_files_generated_directory: "../roles/alban.andrieu.dropbox"

- name: Install workstation add-on
  hosts: workstation
  remote_user: albandri


  roles:
    - alban.andrieu.workstation

  vars:
       dropbox_user_directory: "/workspace/Dropbox"
       dropbox_user_host: "2366450895"
       nodejs_enabled: false
       variety_owner: "{{ user }}"
       variety_group: "{{ group }}"
       dropbox_owner: "{{ user }}"
       dropbox_group: "{{ group }}"

#- name: Apply swarm configuration to all jenkins slaves
#  hosts: jenkins-swarm
#  remote_user: albandri
#
#
#  vars_prompt:
#  - name: jenkins_username
#    prompt: "What is your jenkins user?"
#    private: no
#  - name: jenkins_password
#    prompt: "What is your jenkins password?"
#    private: yes
#
#  roles:
#    - jenkins-swarm
#
#  vars:
#       docker_files_enable: yes,
#       docker_files_generated_directory: "../roles/alban.andrieu.jenkins-swarm",

- name: Install webmin
  hosts: webmin
  remote_user: albandri


  roles:
    - alban.andrieu.webmin

  vars:
      docker_files_enable: no
      docker_files_generated_directory: "../roles/alban.andrieu.webmin"

- import_playbook: nexus.yml

- import_playbook: tomcat.yml

# This playbook deploys a simple standalone JBoss server.

#- import_playbook: jboss.yml

#- import_playbook: lamp.yml

#WARNING jenkins-master role has disabled a2dissite 000-default
- name: Configure and deploy the nabla php sample application code to apache
  hosts: nabla-servers
  remote_user: albandri


  roles:
    - alban.andrieu.web

  vars:
       apache_listen_port: 7070
       #jenkins_proxy_port: "{{ apache_listen_port }}" #TODO why is it needed!!!
       phpmyadmin_mysql_user: root
       phpmyadmin_mysql_password: microsoft
       phpmyadmin_mysql_port: "{{ apache_listen_port }}"
       php_date_timezone: "Europe/Paris"
       mysql_innodb_log_file_size: "5M"
       mysql_root_username: root
       mysql_root_password: microsoft
       docker_files_enable: yes
       docker_files_generated_directory: "../roles/alban.andrieu.web"

- name: Install pagespeed
  hosts: apache-servers
  remote_user: albandri

  roles:
    - role: alban.andrieu.pagespeed

  vars:
       apache_listen_port: 7070
       pagespeed_package_arch: "amd64"

- name: Install evasive
  hosts: apache-servers
  remote_user: albandri

  roles:
    - role: alban.andrieu.evasive

  vars:
       apache_listen_port: 7070

- name: Install awstats
  hosts: apache-servers
  remote_user: albandri

  roles:
    - role: alban.andrieu.awstats

  vars:
       apache_listen_port: 7070

- import_playbook: jenkins-master.yml

- import_playbook: maven.yml

- import_playbook: jenkins-slave.yml

- name: Install css
  hosts: css
  remote_user: albandri

  roles:
    - alban.andrieu.css

  vars:
#       ruby_version: 2.3.1
       ruby_version: "2.2"

- import_playbook: chrome.yml

- import_playbook: nodejs.yml

- name: configure supervisor
  hosts: supervisors
  remote_user: albandri

  roles:
    - role: supervisor

# start a basic python http server on port 8000
  vars:
      name: webserver
      command: python -m SimpleHTTPServer 8000
      directory: /opt/test
# user is the same as base_admin_username
      user: root
      stopsignal: HUP

#- name: configure supervisor
#  hosts: supervisors
#  remote_user: albandri
#
#  roles:
#    - role: supervisor
#      name: fitness
#      command: /workspace/xebium/run.sh
#      directory: /workspace/xebium
## user is the same as base_admin_username
#      user: ubuntu

- import_playbook: sonar.yml

#Below cmake conky is included in workstation role
#- name: Install conky
#  hosts: workstation
#  remote_user: albandri
#
#  roles:
#    - role: alban.andrieu.conky

- name: Install git
  hosts: workstation
  remote_user: albandri


  roles:
    - role: geerlingguy.git

- name: Install subversion
  hosts: workstation
  remote_user: albandri
  ignore_errors: true

  roles:
    - role: alban.andrieu.subversion

  vars:
      subversion_owner: "{{ user }}"
      subversion_group: "{{ group }}"

- name: Apply common shell configuration
  hosts: workstation
#  remote_user: root
  remote_user: albandri

#  become: true

  roles:
    - role: alban.andrieu.shell

  vars:
    shell_default_version: "30"
    shell_git_configure_enabled: yes
    shell_git:
      # Additional properties: 'shell_git_machine, shell_git_login, shell_git_email, shell_git_password, shell_git_name, shell_git_path, shell_git_ssl'.
         - {
           shell_git_machine: '82.231.208.223',
           shell_git_login: 'AlbanAndrieu',
           shell_git_email: 'alban.andrieu@free.fr',
           shell_git_password: 'microsoft',
           shell_git_name: "Andrieu, Alban",
           shell_git_path: '/usr/bin',
           shell_git_ssl: false,
           shell_git_meld_enabled: yes,
           shell_git_editor: "gedit"
           }
#         - {
#           shell_git_machine: 'https://github.com',
#           shell_git_login: 'AlbanAndrieu',
#           shell_git_email: 'alban.andrieu@free.fr',
#           shell_git_password: 'microsoft',
#           shell_git_name: "Andrieu, Alban",
#           shell_git_path: '/usr/bin',
#           shell_git_ssl: false,
#           shell_git_meld_enabled: yes,
#           shell_git_editor: "gedit"
#           }
#         - {
#           shell_git_machine: 'https://bitbucket.org',
#           shell_git_login: 'AlbanAndrieu',
#           shell_git_email: 'alban.andrieu@free.fr',
#           shell_git_password: 'microsoft',
#           shell_git_name: "Andrieu, Alban",
#           shell_git_path: '/usr/bin',
#           shell_git_ssl: false,
#           shell_git_meld_enabled: yes,
#           shell_git_editor: "gedit"
#           }
#      shell_rlogin_enabled: no
    shell_maven_enabled: no
    newrelic_license_key: de35bf5d191ebb208d359b2cd24a60616a02b1f3
    docker_files_enable: no
#    docker_files_generated_directory: "../roles/alban.andrieu.shell"

#- name: Install eclipse

#  hosts: workstation
#  remote_user: albandri
#
#  roles:
#    - role: alban.andrieu.eclipse
#
#  vars:
#      docker_files_generated_directory: "../roles/alban.andrieu.eclipse"
#      docker_files_enable: yes
#      #eclipse_base_dir: /workspace/eclipse
#      #user: "albandri"
#      #home: "/workspace/users/albandri10"

- import_playbook: zap.yml

- import_playbook: jmeter.yml

- name: Install mon
  hosts: workstation
  remote_user: albandri


  roles:
    - alban.andrieu.mon

  vars:
      apache_listen_port: 7070
      mon_localhost : "albandri"
      mon_custom_group: "nabla"
      mon_admin_email: "alban.andrieu@free.fr"
      mon_weekly_email: "team@free.fr"
      user: root
      home: "/root"

- import_playbook: jdiskreport.yml

- import_playbook: private-bower.yml

- import_playbook: owasp-wte.yml

- name: Install samba
  hosts: workstation

  roles:
    - geerlingguy.samba
