---
#This script is used to configure your workstation (for developer)

#sudo ansible-playbook -i hosts -c local -v workstation.yml -vvvv | tee setup.log

- hosts: all
  gather_facts: true
  tasks:
    - name: group hosts by distribution
      group_by: key="{{ ansible_distribution }}-{{ ansible_distribution_version }}"

- hosts: RedHat-7*:RedHat-6*:CentOS-6*:Ubuntu-12.04:Ubuntu-14.04
  gather_facts: false
  tasks:
    - name: group hosts for supported distributions
      group_by: key="supported"

- hosts: "!supported"
  gather_facts: false
  tasks:
    - name: fail for unsupported distribution
      fail: msg="{{ ansible_distribution }} {{ ansible_distribution_version }}
                 is not a supported OS for a Tower installation.  Supported
                 OSes include Red Hat Enterprise Linux 6/7, CentOS 6, or
                 Ubuntu 12.04/14.04."

- name: Add repo configuration to all nodes
  hosts: RedHat-7*:RedHat-6*:CentOS-6*
  gather_facts: false
  remote_user: root
#  connection: local

  roles:
    - geerlingguy.repo-epel
    - geerlingguy.repo-remi

- name: Apply hostname configuration
  hosts: all
  remote_user: root
#  connection: local

  roles:
    - hostname
    
#  vars_files:
#    - [ "roles/hostname/defaults/main.yml" ]

#- name: Apply ntp configuration to all nodes
#  hosts: all
#  gather_facts: false
#  remote_user: root
##  connection: local
#
#  roles:
#    - geerlingguy.ntp
#    
#  vars:
#       ntp_timezone: Europe/Paris

#Warning below has a ntp configuration
- name: Apply common configuration to all nodes
  hosts: Ubuntu-12*:Ubuntu-14*
  gather_facts: false
  remote_user: root
#  connection: local

  roles:
    - common

  vars:
       apt_notification_email: "alban.andrieu@free.fr"
       ntp_timezone: Europe/Paris

- name: Apply dns configuration to all nodes
  hosts: Ubuntu-12*:Ubuntu-14*
  gather_facts: false
  remote_user: root
#  connection: local

  roles:
    - dns

  vars:
       defaultdomain: france.effix.fr
       search: misys.global.ad misys.global.ad. nt.france.effix.fr. france.effix.fr. effix.fr.
       dns_nameservers:
         - "10.25.200.3" # work dns
         - "10.21.200.3" # work dns
         - "8.8.8.8" # google dns
         - "8.8.4.4" # google dns
#paris
#      nameserver1: 10.21.200.3
#      nameserver2: 10.25.200.3
#gdynia
#      nameserver1: 10.7.109.27
#      nameserver2: 10.7.111.244

#- name: Apply firewall configuration to all nodes
#  hosts: Ubuntu-12*:Ubuntu-14*
#  gather_facts: false
#  remote_user: root
##  connection: local
#
#  roles:
#    - geerlingguy.firewall
#
#  vars:
#       firewall_allowed_tcp_ports:
#       - "22"
#       - "25"
#       - "80"
#       - "443"
#       - "6082"
#       - "8080"
#       - "8280"
#       - "8380"
#       - "9000"
#       - "8081"
#       - "8085"
#       - "3306"
#       - "9090"
#       - "8180"
#       - "7070"
#       - "8480"
##   21: FTP
##   8021: FTP FreeNas
##   22: SSH
##   25: SMTP
##   80: HTTP / Nginx
##   123: DNS
##   443: HTTPS
##   2222: SSH alternate
##   4949: Munin
##   6082: Varnish admin
##   8080: HTTP alternate (often used with Tomcat)
##   8280: Tomcat HTTP
##   8983: Tomcat HTTP TODO???????
##   8443: Tomcat HTTPS TODO???????
##   8380: Jenkins
##   9000: SonarQube
##   8081: Nexus
##   8085: Fitness
##   3306: Mysql
##   9090: Jetty
##   8180: JBoss
##   8787: JBoss remote debug port
##   8181: JBoss http debug port
##   9990 : Jboss console
##   7070: Apache
##   8480: NGinx
##   4445: Lumbermill
##   4243: Docker
##   137, 138, 139, 445: Samba
##   10000: Webmin
##   20000: Usermin
##   5050: CouchPatato
##   8095 : Atlassion Crowd
##   8060 : Atlassion Fisheye
##   8082 : Atlassian JIRA
##   7000: FreeNas
##   5001 : xrdp 
##   5000 : xrdp / Openstack
##   3689: FireFly
##   8091 : Transmission
##   9091 : Transmission
##   8200 : MiniDLNA
##   8083 : SickBeard
##   32400 : Plex
##   4040 : Subsonic
##   8381 : jenkins FreeNas
##   9090 : SABznbd
##   8181 : HeadPhone
##   8084 : OwnCloud
##   82 : Varnish or Google +
##   7070 : Gearman
##   4445: Selenium
##   4444: Selenium
##   9042: Supervisor
##   6000: Logstash
##   9200: Kibana

- name: Apply security configuration
  hosts: security
  remote_user: root
#  connection: local

  roles:
    - security

#- name: Install cmake
#  hosts: cmake
#  remote_user: root
##  connection: local
#
#  roles:
#    - cmake

- name: Install cpp
  hosts: cpp
  remote_user: root
#  connection: local

  roles:
    - cpp

  vars:
      gcc_version: "4:4.8.2-1ubuntu6"
      cppunit_version: "1.13-0"
      boost_version: "1.54"

- name: Install java
  hosts: java
  remote_user: root
#  connection: local

  roles:
    - java

- name: Install virtualbox
  hosts: virtualbox
  remote_user: root
#  connection: local

  roles:
    - virtualbox

  vars:
      virtualbox_package_name: virtualbox
      virtualbox_dkms_enable: yes

- name: Install vagrant
  hosts: vagrant
  remote_user: root
#  connection: local

  roles:
    - vagrant

  vars:
       vagrant_libvirt_enabled: true
       vagrant_windows_enabled: false
#      vagrant_url: https://dl.bintray.com/mitchellh/vagrant/vagrant_1.6.3_x86_64.deb

#- name: Install vagrant user
#  hosts: vagrant
#  remote_user: root
##  connection: local
#
#  roles:
#    - vagrant-user
#
#  vars:
#      vagrant_root_password_enabled: false
#      vagrant_user_shell: "/bin/false"

- name: Install docker
  hosts: docker
  remote_user: root
#  connection: local
  roles:
    - docker


- name: Install locale
  hosts: locale
  remote_user: root
#  connection: local

  roles:
    - locale

- name: Install zabbix-agent
  hosts: zabbix-agent
  remote_user: root
#  connection: local

  roles:
    - zabbix-agent

  vars:
      zabbix_agent_major: '2'
      zabbix_agent_minor: '2'
      zabbix_agent_revision: '7'
      zabbix_agent_ubuntu: "1:{{zabbix_agent_version}}-1+trusty"
      #zabbix_agent_Server: 127.0.0.1
      
- name: Install webmin
  hosts: webmin
  remote_user: root
#  connection: local

  roles:
    - webmin

  vars:
      docker_files_enable: yes
      docker_files_generated_directory: "roles/webmin"
        
- name: Install nexus
  hosts: nexus
  remote_user: root
#  connection: local

  roles:
    - nexus

- name: Install xvbf
  hosts: xvbf
  remote_user: root
#  connection: local

  roles:
    - xvbf

- name: Install selenium
  hosts: selenium
  remote_user: root
#  connection: local

  roles:
     - role: selenium

#
#- name: Install zfs
#  hosts: zfs
#  remote_user: root
##  connection: local
#
#  roles:
#    - zfs

#Use below only if you want your servers to be part of MGR build farm
#- name: Apply administration configuration to all nodes
#  hosts: Ubuntu-12*:Ubuntu-14*
#  gather_facts: false
#  remote_user: root
##  connection: local
#
#  roles:
#    - administration

- name: Apply configuration to jenkins master
  hosts: jenkins-master
  remote_user: root
#  connection: local

  roles:
    - role: jenkins-master

  vars:
      docker_files_generated_directory: "roles/jenkins-master"
      docker_files_enable: yes
      jenkins_proxy: apache
      jenkins_proxy_hostname: jenkins.myhost.com
#      jenkins_ssh_key_file: "{{resources_to}}/resources/jenkins/ssh_key"    # (you can manage remote files with Stouts.resources role)
      jenkins_ssh_key_file: "~/.ssh/id_rsa.pub"
      jenkins_http_port: 8380
      jenkins_proxy_port: 7070
#      jenkins_home_dir: /jenkins
      jenkins_java_args:
        - "-Xmx1024m"
        - "-XX:MaxPermSize=512m"
        - "-Djava.awt.headless=true"
      jenkins_prefix: "/jenkins"
      jenkins_plugins:
        - "subversion"
#      jenkins_jobs:
#        - name: test
#          action: delete

- name: Apply common configuration to all jenkins slaves
  hosts: jenkins-slaves
  remote_user: root
#  connection: local

  vars_files:
#  - [ "roles/jenkins-slave/defaults/main.yml" ]
  - [ "roles/jenkins-slave/vars/{{ ansible_distribution }}-{{ ansible_architecture }}.yml", "roles/jenkins-slave/vars/{{ ansible_distribution }}.yml" ]

  roles:
    - jenkins-slave

  vars:
    docker_files_enable: yes
    docker_files_generated_directory: "roles/jenkins-slave"
#    jenkins_home_dir: "/jenkins"
#    jenkins_slave_home: "/kgr-mvn"
    jenkins_jdk7_enable: yes

- name: Install maven
  hosts: maven
  remote_user: root
#  connection: local

  roles:
    - maven

- name: Install css
  hosts: css
  remote_user: root
#  connection: local

  roles:
    - css

- name: Install chrome
  hosts: chrome
  remote_user: root
#  connection: local

  roles:
     - role: chrome

  vars:
       google_talkplugin_enabled: yes                       # Enable module
       google_agent_pkg_state: installed # Package states: present or installed or latest

- name: Install nodejs
  hosts: nodejs
  remote_user: root
#  connection: local

  roles:
    - nodejs

- name: Install workstation add-on
  hosts: workstation
  remote_user: root
#  connection: local

  roles:
    - workstation
    
  vars:
       dropbox_user_directory: "/workspace/Dropbox"
       dropbox_user_host : "2366450895"
       
#- name: Install dropbox
#  hosts: workstation
#  remote_user: root
##  sudo: yes
##  sudo_user: "{{ user }}"
##  connection: local
#
#  roles:
#    - dropbox
#
#  vars:   
#       docker_files_enable: yes
#       docker_files_generated_directory: "roles/dropbox"
       
#- name: Apply swarm configuration to all jenkins slaves
#  hosts: jenkins-swarm
#  remote_user: root
##  connection: local
#
#  vars_prompt:
#  - name: jenkins_username
#    prompt: "What is your jenkins user?"
#    private: no
#  - name: jenkins_password
#    prompt: "What is your jenkins password?"
#    private: yes
#
#  roles:
#    - jenkins-swarm
#
#  vars:
#       docker_files_enable: yes,
#       docker_files_generated_directory: "roles/jenkins-swarm",

# This playbook deploys a simple standalone Tomcat 7 server.
- name: Deploy Tomcat
  hosts: tomcat-servers
  remote_user: root
#  connection: local

  roles:
    - tomcat

# This playbook deploys a simple standalone JBoss server.

- name: Deploy Jboss
  hosts: jboss-servers
  remote_user: root
#  connection: local

  roles:
    - jboss

## This playbook deploys a MySQL database.
#- name: Deploy MySQL and configure the databases
#  hosts: mysql-servers
#  remote_user: root
##  connection: local
#
#  roles:
#    - geerlingguy.mysql
#
#  vars:
#       mysql_innodb_log_file_size: "5M"
#       mysql_root_username: root
#       mysql_root_password: microsoft
#
## This playbook deploys an Apache database.
#- name: Deploy Apache and configure the server
#  hosts: apache-servers
#  remote_user: root
##  connection: local
#
#  roles:
#    - geerlingguy.apache
#
#  vars:
#       apache_listen_port: 7070
#
#- name: Add dependencies for Apache like PHP
#  hosts: apache-servers
#  remote_user: root
##  connection: local
#
#  roles:
#    - geerlingguy.php
#    - geerlingguy.php-mysql
#
#  vars:
#       php_date_timezone: "Europe/Paris"
#
#- name: Add admin tool for Apache like PHPmyAdmin
#  hosts: apache-servers
#  remote_user: root
##  connection: local
#
#  roles:
#    - geerlingguy.phpmyadmin
#
#  vars:
#       phpmyadmin_mysql_user: root
#       phpmyadmin_mysql_password: microsoft
#       phpmyadmin_mysql_port: 7070
#       apache_listen_port: 7070
#       php_date_timezone: "Europe/Paris"
#       mysql_innodb_log_file_size: "5M"
#       mysql_root_username: root
#       mysql_root_password: microsoft

#WARNING jenkins-master role has disabled a2dissite 000-default
- name: Configure and deploy the nabla php sample application code to apache
  hosts: nabla-servers
#  hosts: apache-servers
  remote_user: root
#  connection: local

  roles:
    - web

  vars:
       phpmyadmin_mysql_user: root
       phpmyadmin_mysql_password: microsoft
       phpmyadmin_mysql_port: 7070
       apache_listen_port: 7070
       php_date_timezone: "Europe/Paris"
       mysql_innodb_log_file_size: "5M"
       mysql_root_username: root
       mysql_root_password: microsoft          
       docker_files_enable: yes
       docker_files_generated_directory: "roles/web"

- name: Install pagespeed
  hosts: apache-servers
  remote_user: root
#  connection: local
  roles:
    - role: pagespeed     

  vars:
       pagespeed_package_arch: "amd64"
        
- name: configure supervisor
  hosts: supervisors
  remote_user: root
#  connection: local
  roles:
    - role: supervisor

# start a basic python http server on port 8000
  vars:
      name: webserver
      command: python -m SimpleHTTPServer 8000
      directory: /opt/test
# user is the same as base_admin_username
      user: root
      stopsignal: HUP

#- name: configure supervisor
#  hosts: supervisors
#  remote_user: root
##  connection: local
#  roles:
#    - role: supervisor
#      name: fitness
#      command: /workspace/xebium/run.sh
#      directory: /workspace/xebium
## user is the same as base_admin_username
#      user: ubuntu

- name: Install sonar
  hosts: sonar
  remote_user: root
#  connection: local
  roles:
    - role: sonar

  vars:
#TODO merge sonar-runner.properties.j2 file from jenkins_slave role
      sonar_analyzer_runner_install: false
#Handle by jenkins_slave role, Warning it will override settings.xml.j2 from jenkins_slave role
      maven_install: false
      sonar_mysql_install: true
      sonar_jdbc_driver: "mysql"
      sonar_jdbc_port: 3306
      mysql_root_username: root
      mysql_root_password: microsoft           
      sonar_jdbc_pass: "{{ mysql_root_password }}"
      sonar_login_user: "{{ mysql_root_username }}"
      sonar_login_password: "{{ mysql_root_password }}"
      sonar_shell: "/bin/false"

- name: Install conky
  hosts: workstation
  remote_user: root
#  connection: local
  roles:
    - role: conky

- name: Install subversion
  hosts: workstation
  remote_user: root
#  connection: local
  roles:
    - role: subversion

- name: Apply user shell configuration
  connection: local
  hosts: workstation
  #sudo: yes
  remote_user: root
  
  vars_files:
  - [ "roles/shell/defaults/main.yml" ]
  - [ "roles/shell/vars/default.yml" ]
  - [ "roles/shell/vars/version.yml" ]
  - [ "roles/shell/vars/custom-{{ ansible_distribution }}-{{ ansible_architecture }}.yml", "roles/shell/vars/custom-{{ ansible_distribution }}.yml" ]

  roles:
    - role: shell

  vars:
      docker_files_generated_directory: "roles/shell"
      docker_files_enable: yes  
#      shell_owner: "{{ user }}"
#      shell_owner_home: "{{ home }}"
#      shell_env_directory: "{{ home }}/env/tmp"

- name: Install eclipse
  connection: local
  hosts: workstation
  remote_user: root
#  connection: local
  roles:
    - role: eclipse

  vars:
      docker_files_generated_directory: "roles/eclipse"
      docker_files_enable: yes
      #eclipse_base_dir: /workspace/eclipse
      #user: "albandri"
      #home: "/workspace/users/albandri10"

- name: Install zap
  connection: local
  hosts: workstation
  remote_user: root
#  connection: local
  roles:
    - role: zap

  vars:
      docker_files_generated_directory: "roles/zap"
      docker_files_enable: yes
      
- name: Install jmeter
  hosts: workstation
  remote_user: root
#  connection: local
  roles:
    - role: jmeter     
    
#- name: Install mon
#  hosts: workstation
#  remote_user: root
##  connection: local
#
#  roles:
#    - mon      
#    
#  vars:      
#      mon_localhost : "albandri"
#      mon_custom_group: "nabla"        
#      mon_admin_email: "alban.andrieu@free.fr"
#      mon_weekly_email: "team@free.fr"
#      user: root
#      home: "/root"
